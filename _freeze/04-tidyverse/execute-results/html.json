{
  "hash": "d15eafe4a02741fee65351483435e9bf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"4: The Tidyverse\"\nformat: \n  html:\n    toc: true\neditor: visual\n---\n\n\n\n\nThe [**Tidyverse**](https://www.tidyverse.org/) is a collection of R packages created and maintained by the same group of people, largely from the same company that also created RStudio: Posit!\n\nThe Tidyverse is designed to make data science easier, more efficient, and more fun.\\\nIt is built around the idea of *tidy data*, which in essence just means that data is organized in a way that makes it easy to work with.\nIn the previous section we have already heard the two core properties of tidy data:\n\n1.  Each **column** of your data is a **variable**\n2.  Each **row** of your data is an **observation**\n\n![From R4DS Chapter 5](https://r4ds.hadley.nz/images/tidy-1.png)\n\nAnd the tidyverse is created in part to make it easy to get your data in that shape and work with data in that shape.\nIf `R` in general is a language, then we can think of \"tidyverse\" as a kind of dialect — it's still R, but it has a specific context and use case and it is spoken by a community of people roughly doing similar kinds of data analysis.\n\nLet's start by loading the `tidyverse` meta-package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\nYou'll see a lot of information there, and that's nothing to worry about.\nWhat happened here is the following:\n\n1.  The `tidyverse` package's main purpose is to load *other* packages, like `dplyr`, `ggplot2`, `tidyr`, ... -\\> These are the *actual* tidyverse packages that provide the functionality we want!\n2.  It warns you about **conflicting function names**, like `filter` and `lag`. There are built-in functions in R of the same name that do very different things than they do in the tidyverse, and for the most part that is not a problem **unless** you try to use the function `filter` from the `dplyr` package but forgot to load `dplyr` beforehand!\n\nNote that in the tidyverse, the `tibble` enhances the `data.frame`!\\\nTibbles are simialr to data.frames, but they look nice and avoid some potentially confusing issues.\\\nFor now we don't need to know more, but fur future reference you should not worry when you encounter a `tibble`!\n\n## Tidyverse Basics: Pipes and Verbs\n\nWe start by loading the `gapminder` package again for its dataset, just like we did before, but now we can `glimpse` it rather than `str` it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder)\n\nglimpse(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,704\nColumns: 6\n$ country   <fct> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", …\n$ continent <fct> Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, …\n$ year      <int> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, …\n$ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8…\n$ pop       <int> 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12…\n$ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, …\n```\n\n\n:::\n:::\n\n\n\n\nRemember how it was somewhat awkward to select specific rows and columns from the `data.frame` before?\n\nFor example, here is \"country, life expectancy and population for all Asian countries in 1967\" in *base R* syntax:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder[gapminder$continent == \"Asia\" & gapminder$year == 1967, \n          c(\"country\", \"lifeExp\", \"pop\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 33 × 3\n   country          lifeExp       pop\n   <fct>              <dbl>     <int>\n 1 Afghanistan         34.0  11537966\n 2 Bahrain             59.9    202182\n 3 Bangladesh          43.5  62821884\n 4 Cambodia            45.4   6960067\n 5 China               58.4 754550000\n 6 Hong Kong, China    70     3722800\n 7 India               47.2 506000000\n 8 Indonesia           46.0 109343000\n 9 Iran                52.5  26538000\n10 Iraq                54.5   8519282\n# ℹ 23 more rows\n```\n\n\n:::\n:::\n\n\n\n\nIn the `tidyverse`, or specifically `dplyr` syntax, we would write it like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(continent == \"Asia\" & year == 1967) |>\n  select(country, lifeExp, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 33 × 3\n   country          lifeExp       pop\n   <fct>              <dbl>     <int>\n 1 Afghanistan         34.0  11537966\n 2 Bahrain             59.9    202182\n 3 Bangladesh          43.5  62821884\n 4 Cambodia            45.4   6960067\n 5 China               58.4 754550000\n 6 Hong Kong, China    70     3722800\n 7 India               47.2 506000000\n 8 Indonesia           46.0 109343000\n 9 Iran                52.5  26538000\n10 Iraq                54.5   8519282\n# ℹ 23 more rows\n```\n\n\n:::\n:::\n\n\n\n\nWhat happened here?\nLet's dissect this one by one:\n\n1.  We started with the `gapminder` dataset, and *then*, via the \"pipe\" `|>`,\n2.  We used `filter()` to select **rows** using a logical expression, and *then*\n3.  We used `select()` to select specific **columns** (without having to quote than with `\"`!)\n\nThis is a combination of the pipe-syntax, which passes things down to the next function, and the most common tidyverse **verbs** that are at the core of most data operations.\n\nThe pipe `|>` works everywhere in R, and `x |> foo()` is just a different way to write `foo(x)`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\n\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nx |> length()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n\n\nThis becomes really powerful once we *chain* many functions.\\\nConsider a made-up example:\n\n``` r\nx |>\n  do_the_thing() |>\n  do_the_other_thing() |>\n  twist_it() |>\n  shake_it_around() |>\n  do_a_little_dance()\n```\n\nHere you can read the code top to bottom, and understand the sequence of events just by following the code.\nConsider what this would look like without the `|>`:\n\n``` r\ndo_a_little_dance(shake_it_around(twist_it(do_the_other_thing(do_the_thing(x)))))\n```\n\nOr, with a little more indentation:\n\n``` r\ndo_a_little_dance(\n  shake_it_around(\n    twist_it(\n      do_the_other_thing(\n        do_the_thing(x)\n      )\n    )\n  )\n)\n```\n\nYou would have to read the code \"inside out\" to follow what's happening here.\n\nAnother alternative would be to create new variables or overwrite the previous one, like so:\n\n``` r\nx <- do_the_thing(x)\nx <- do_the_other_thing(x)\nx <- twist_it(x)\nx <- shake_it_around(x) \nx <- do_a_little_dance(x)\n```\n\nThe pipe syntax might take some getting used to, but usually people find it quite intuitive after a while.\n\nPlease keep in mind though that *not everything* has to be translated into a pipe-syntax, and that there are always other ways to do the same thing.\n\n## Common Verbs (I)\n\nAll verbs take a `data.frame` (or `tibble`, which are almost the same thing) as their first argument, and the most important ones are:\n\n-   `select()`: Selects variables (**columns**) of the dataset (without quoting them with `\" \"`)\n-   `filter()`: Filters the dataset to only the **rows** matching the condition(s) inside\n-   `arrange()`: **Sorts** the dataset by a variable like `pop`, optionally in decreasing order by using `desc()` inside.\n\nWe start with `select()`, which is fairly self-explanatory and corresponds to using `[ ]` with column names or indices as we've seen before\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(year, country, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 3\n    year country          pop\n   <int> <fct>          <int>\n 1  1952 Afghanistan  8425333\n 2  1957 Afghanistan  9240934\n 3  1962 Afghanistan 10267083\n 4  1967 Afghanistan 11537966\n 5  1972 Afghanistan 13079460\n 6  1977 Afghanistan 14880372\n 7  1982 Afghanistan 12881816\n 8  1987 Afghanistan 13867957\n 9  1992 Afghanistan 16317921\n10  1997 Afghanistan 22227415\n# ℹ 1,694 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# If we happen to know the variable indices, this also works\ngapminder |>\n  select(3, 1, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 3\n    year country          pop\n   <int> <fct>          <int>\n 1  1952 Afghanistan  8425333\n 2  1957 Afghanistan  9240934\n 3  1962 Afghanistan 10267083\n 4  1967 Afghanistan 11537966\n 5  1972 Afghanistan 13079460\n 6  1977 Afghanistan 14880372\n 7  1982 Afghanistan 12881816\n 8  1987 Afghanistan 13867957\n 9  1992 Afghanistan 16317921\n10  1997 Afghanistan 22227415\n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n\n\nIn cases where we pick out individual variables, we often want to sort by one as well:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(year, continent, country) |>\n  arrange(year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 3\n    year continent country    \n   <int> <fct>     <fct>      \n 1  1952 Asia      Afghanistan\n 2  1952 Europe    Albania    \n 3  1952 Africa    Algeria    \n 4  1952 Africa    Angola     \n 5  1952 Americas  Argentina  \n 6  1952 Oceania   Australia  \n 7  1952 Europe    Austria    \n 8  1952 Asia      Bahrain    \n 9  1952 Asia      Bangladesh \n10  1952 Europe    Belgium    \n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n\n\nOr sorting descendingly with the `desc()` helper function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(year, continent, country) |>\n  arrange(desc(year))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 3\n    year continent country    \n   <int> <fct>     <fct>      \n 1  2007 Asia      Afghanistan\n 2  2007 Europe    Albania    \n 3  2007 Africa    Algeria    \n 4  2007 Africa    Angola     \n 5  2007 Americas  Argentina  \n 6  2007 Oceania   Australia  \n 7  2007 Europe    Austria    \n 8  2007 Asia      Bahrain    \n 9  2007 Asia      Bangladesh \n10  2007 Europe    Belgium    \n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n\n\nFor a numeric variable like `year` we could also just sort by a negative of the variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(year, continent, country) |>\n  arrange(-year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 3\n    year continent country    \n   <int> <fct>     <fct>      \n 1  2007 Asia      Afghanistan\n 2  2007 Europe    Albania    \n 3  2007 Africa    Algeria    \n 4  2007 Africa    Angola     \n 5  2007 Americas  Argentina  \n 6  2007 Oceania   Australia  \n 7  2007 Europe    Austria    \n 8  2007 Asia      Bahrain    \n 9  2007 Asia      Bangladesh \n10  2007 Europe    Belgium    \n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n\n\nBut `desc()` has the benefit of also working for `character` (sorted alphabetically) or `factor` variables (sorted by their `levels`), which makes `desc()` applicable in more cases.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(year, continent, country) |>\n  arrange(desc(continent))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 3\n    year continent country  \n   <int> <fct>     <fct>    \n 1  1952 Oceania   Australia\n 2  1957 Oceania   Australia\n 3  1962 Oceania   Australia\n 4  1967 Oceania   Australia\n 5  1972 Oceania   Australia\n 6  1977 Oceania   Australia\n 7  1982 Oceania   Australia\n 8  1987 Oceania   Australia\n 9  1992 Oceania   Australia\n10  1997 Oceania   Australia\n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder97 <- gapminder |>\n  filter(year == 1997) |>\n  arrange(pop)\n```\n:::\n\n\n\n\nNote that in `filter()` you use logical expressions as we've seen in section 2!\\\nYou can combine multiple conditions by passing them as separate arguments with `,` which inside `filter()` is the same as using the logical `AND` with `&`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Explicitly using AND & to combine year and country conditions\ngapminder |>\n  filter(year == 1997 & country == \"Iceland\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  country continent  year lifeExp    pop gdpPercap\n  <fct>   <fct>     <int>   <dbl>  <int>     <dbl>\n1 Iceland Europe     1997    79.0 271192    28061.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Identical:\ngapminder |>\n  filter(\n    year > 1990, \n    country == \"Iceland\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  country continent  year lifeExp    pop gdpPercap\n  <fct>   <fct>     <int>   <dbl>  <int>     <dbl>\n1 Iceland Europe     1992    78.8 259012    25144.\n2 Iceland Europe     1997    79.0 271192    28061.\n3 Iceland Europe     2002    80.5 288030    31163.\n4 Iceland Europe     2007    81.8 301931    36181.\n```\n\n\n:::\n:::\n\n\n\n\nAs a more advanced example, we can use `select()`-helper functions to select variables that start with a certain pattern or contain a certain word:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(starts_with(\"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 2\n   country     continent\n   <fct>       <fct>    \n 1 Afghanistan Asia     \n 2 Afghanistan Asia     \n 3 Afghanistan Asia     \n 4 Afghanistan Asia     \n 5 Afghanistan Asia     \n 6 Afghanistan Asia     \n 7 Afghanistan Asia     \n 8 Afghanistan Asia     \n 9 Afghanistan Asia     \n10 Afghanistan Asia     \n# ℹ 1,694 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ngapminder |>\n  select(contains(\"gdp\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 1\n   gdpPercap\n       <dbl>\n 1      779.\n 2      821.\n 3      853.\n 4      836.\n 5      740.\n 6      786.\n 7      978.\n 8      852.\n 9      649.\n10      635.\n# ℹ 1,694 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ngapminder |>\n  select(ends_with(\"p\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 3\n   lifeExp      pop gdpPercap\n     <dbl>    <int>     <dbl>\n 1    28.8  8425333      779.\n 2    30.3  9240934      821.\n 3    32.0 10267083      853.\n 4    34.0 11537966      836.\n 5    36.1 13079460      740.\n 6    38.4 14880372      786.\n 7    39.9 12881816      978.\n 8    40.8 13867957      852.\n 9    41.7 16317921      649.\n10    41.8 22227415      635.\n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### Your turn\n\n1.  Select the country and life expectancy variables for the year 1952\n2.  Subset the dataset to only contain data recorded after 1990\n3.  Subset the dataset to only contain data in the 1970s for Ecuador\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 1952) |>\n  select(country, lifeExp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 142 × 2\n   country     lifeExp\n   <fct>         <dbl>\n 1 Afghanistan    28.8\n 2 Albania        55.2\n 3 Algeria        43.1\n 4 Angola         30.0\n 5 Argentina      62.5\n 6 Australia      69.1\n 7 Austria        66.8\n 8 Bahrain        50.9\n 9 Bangladesh     37.5\n10 Belgium        68  \n# ℹ 132 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year > 1990)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 568 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1992    41.7 16317921      649.\n 2 Afghanistan Asia       1997    41.8 22227415      635.\n 3 Afghanistan Asia       2002    42.1 25268405      727.\n 4 Afghanistan Asia       2007    43.8 31889923      975.\n 5 Albania     Europe     1992    71.6  3326498     2497.\n 6 Albania     Europe     1997    73.0  3428038     3193.\n 7 Albania     Europe     2002    75.7  3508512     4604.\n 8 Albania     Europe     2007    76.4  3600523     5937.\n 9 Algeria     Africa     1992    67.7 26298373     5023.\n10 Algeria     Africa     1997    69.2 29072015     4797.\n# ℹ 558 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(\n    year >= 1970, year <= 1979,\n    country == \"Ecuador\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  country continent  year lifeExp     pop gdpPercap\n  <fct>   <fct>     <int>   <dbl>   <int>     <dbl>\n1 Ecuador Americas   1972    58.8 6298651     5281.\n2 Ecuador Americas   1977    61.3 7278866     6680.\n```\n\n\n:::\n\n```{.r .cell-code}\ngapminder |> \n  filter(year > 1969 & year < 1980) |> \n  filter(country == \"Ecuador\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  country continent  year lifeExp     pop gdpPercap\n  <fct>   <fct>     <int>   <dbl>   <int>     <dbl>\n1 Ecuador Americas   1972    58.8 6298651     5281.\n2 Ecuador Americas   1977    61.3 7278866     6680.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(\n    between(year, 1970, 1979),\n    country == \"Ecuador\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  country continent  year lifeExp     pop gdpPercap\n  <fct>   <fct>     <int>   <dbl>   <int>     <dbl>\n1 Ecuador Americas   1972    58.8 6298651     5281.\n2 Ecuador Americas   1977    61.3 7278866     6680.\n```\n\n\n:::\n:::\n\n\n\n\nHint: When you select *and* filter, keep in mind the order of operations!\\\nYou can't filter by a variable which you have de-selected beforehand.\n\n## Common Verbs (II)\n\nSo far we have only selected specific subsets of our data, but now we want to actually *do* something!\nFor that, we have two main options:\n\n1.  Creating a new variable\n2.  Calculating some summary statistic like the mean or median\n\n-   `mutate()`: Creates a **new variables**, e.g. create `pop_m` as the variable `pop` divided by 1,000,000\n-   `summarize()`: Often used together with `group_by()`, this **summarizes** the dataset by calculating something for each group declared by `group_by()`\n-   `group_by()`: Declares the dataset to be **grouped** by the values of variable like `continent` -- we will see examples next!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder <- gapminder |>\n  mutate(pop_m = pop / 1e6)\n\ngapminder |>\n  mutate(pop = pop / 1e6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp   pop gdpPercap pop_m\n   <fct>       <fct>     <int>   <dbl> <dbl>     <dbl> <dbl>\n 1 Afghanistan Asia       1952    28.8  8.43      779.  8.43\n 2 Afghanistan Asia       1957    30.3  9.24      821.  9.24\n 3 Afghanistan Asia       1962    32.0 10.3       853. 10.3 \n 4 Afghanistan Asia       1967    34.0 11.5       836. 11.5 \n 5 Afghanistan Asia       1972    36.1 13.1       740. 13.1 \n 6 Afghanistan Asia       1977    38.4 14.9       786. 14.9 \n 7 Afghanistan Asia       1982    39.9 12.9       978. 12.9 \n 8 Afghanistan Asia       1987    40.8 13.9       852. 13.9 \n 9 Afghanistan Asia       1992    41.7 16.3       649. 16.3 \n10 Afghanistan Asia       1997    41.8 22.2       635. 22.2 \n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  mutate(pop_mean = mean(pop))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 8\n   country     continent  year lifeExp      pop gdpPercap pop_m  pop_mean\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl> <dbl>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.  8.43 29601212.\n 2 Afghanistan Asia       1957    30.3  9240934      821.  9.24 29601212.\n 3 Afghanistan Asia       1962    32.0 10267083      853. 10.3  29601212.\n 4 Afghanistan Asia       1967    34.0 11537966      836. 11.5  29601212.\n 5 Afghanistan Asia       1972    36.1 13079460      740. 13.1  29601212.\n 6 Afghanistan Asia       1977    38.4 14880372      786. 14.9  29601212.\n 7 Afghanistan Asia       1982    39.9 12881816      978. 12.9  29601212.\n 8 Afghanistan Asia       1987    40.8 13867957      852. 13.9  29601212.\n 9 Afghanistan Asia       1992    41.7 16317921      649. 16.3  29601212.\n10 Afghanistan Asia       1997    41.8 22227415      635. 22.2  29601212.\n# ℹ 1,694 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ngapminder |>\n  summarize(\n    pop_mean = mean(pop)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   pop_mean\n      <dbl>\n1 29601212.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  group_by(continent)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 7\n# Groups:   continent [5]\n   country     continent  year lifeExp      pop gdpPercap pop_m\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl> <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.  8.43\n 2 Afghanistan Asia       1957    30.3  9240934      821.  9.24\n 3 Afghanistan Asia       1962    32.0 10267083      853. 10.3 \n 4 Afghanistan Asia       1967    34.0 11537966      836. 11.5 \n 5 Afghanistan Asia       1972    36.1 13079460      740. 13.1 \n 6 Afghanistan Asia       1977    38.4 14880372      786. 14.9 \n 7 Afghanistan Asia       1982    39.9 12881816      978. 12.9 \n 8 Afghanistan Asia       1987    40.8 13867957      852. 13.9 \n 9 Afghanistan Asia       1992    41.7 16317921      649. 16.3 \n10 Afghanistan Asia       1997    41.8 22227415      635. 22.2 \n# ℹ 1,694 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ngapminder |>\n  group_by(continent) |>\n  summarize(mean_pop = mean(pop))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  continent  mean_pop\n  <fct>         <dbl>\n1 Africa     9916003.\n2 Americas  24504795.\n3 Asia      77038722.\n4 Europe    17169765.\n5 Oceania    8874672.\n```\n\n\n:::\n:::\n\n\n\n\nOr multiple things combined:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year >= 1980) |>\n  mutate(pop_m = pop / 1e6) |>\n  # group_by(continent) |>\n  summarize(\n    mean_pop_m = mean(pop_m),\n    median_pop_m = median(pop_m),\n    min_pop_m = min(pop_m),\n    max_pop_m = max(pop_m)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  mean_pop_m median_pop_m min_pop_m max_pop_m\n       <dbl>        <dbl>     <dbl>     <dbl>\n1       37.3         9.19    0.0986     1319.\n```\n\n\n:::\n:::\n\n\n\n\n### Your turn\n\n0.  install the tidyverse & load with `library(tidyverse)`\n1.  Explain in words what has happened in the previous code chunk.\n2.  What happens if you use `summarize()` without `group_by()`?\n3.  Use `summarise()` and the helpful `n_distinct()` to calculate the number of countries per continent\n4.  Create a new variable `gdpPercap_m` as the variable `gdpPercap` divided by 1 Million and rounded to 2 decimal places\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  group_by(continent) |>\n  summarize(\n    num_countries = n_distinct(country),\n    n = n()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  continent num_countries     n\n  <fct>             <int> <int>\n1 Africa               52   624\n2 Americas             25   300\n3 Asia                 33   396\n4 Europe               30   360\n5 Oceania               2    24\n```\n\n\n:::\n\n```{.r .cell-code}\ngapminder |>\n  filter(continent == \"Oceania\") |>\n  group_by(country) |>\n  summarize(\n    n = n(),\n    num_years = n_distinct(year)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  country         n num_years\n  <fct>       <int>     <int>\n1 Australia      12        12\n2 New Zealand    12        12\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  mutate(gdpPercap_m = round(gdpPercap / 1e3, digits = 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 8\n   country     continent  year lifeExp      pop gdpPercap pop_m gdpPercap_m\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl> <dbl>       <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.  8.43        0.78\n 2 Afghanistan Asia       1957    30.3  9240934      821.  9.24        0.82\n 3 Afghanistan Asia       1962    32.0 10267083      853. 10.3         0.85\n 4 Afghanistan Asia       1967    34.0 11537966      836. 11.5         0.84\n 5 Afghanistan Asia       1972    36.1 13079460      740. 13.1         0.74\n 6 Afghanistan Asia       1977    38.4 14880372      786. 14.9         0.79\n 7 Afghanistan Asia       1982    39.9 12881816      978. 12.9         0.98\n 8 Afghanistan Asia       1987    40.8 13867957      852. 13.9         0.85\n 9 Afghanistan Asia       1992    41.7 16317921      649. 16.3         0.65\n10 Afghanistan Asia       1997    41.8 22227415      635. 22.2         0.64\n# ℹ 1,694 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ngapminder |>\n  mutate(gdpPercap_m = gdpPercap / 1e6) |>\n  mutate(gdpPercap_m = round(gdpPercap_m, digits = 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 8\n   country     continent  year lifeExp      pop gdpPercap pop_m gdpPercap_m\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl> <dbl>       <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.  8.43           0\n 2 Afghanistan Asia       1957    30.3  9240934      821.  9.24           0\n 3 Afghanistan Asia       1962    32.0 10267083      853. 10.3            0\n 4 Afghanistan Asia       1967    34.0 11537966      836. 11.5            0\n 5 Afghanistan Asia       1972    36.1 13079460      740. 13.1            0\n 6 Afghanistan Asia       1977    38.4 14880372      786. 14.9            0\n 7 Afghanistan Asia       1982    39.9 12881816      978. 12.9            0\n 8 Afghanistan Asia       1987    40.8 13867957      852. 13.9            0\n 9 Afghanistan Asia       1992    41.7 16317921      649. 16.3            0\n10 Afghanistan Asia       1997    41.8 22227415      635. 22.2            0\n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Other Useful Verbs\n\n### Changing Shapes\n\nA more advanced topic but often needed for data manipulation is reshaping your data using the `tidyr` package.\n\nThis might be best explained by example.\\\nSay we want to calculate the difference in life expectancy between 1952 and 2007 for each country and continent, but using the verbs we've seen so far we can't do that with a simple `mutate()`.\nWe can instead use `pivot_wider()` which is a function that takes a \"long\" dataset and pivots it into a \"wide\" dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year %in% c(1952, 2007)) |>\n  pivot_wider(\n    id_cols = c(country, continent), \n    names_from = year, \n    values_from = lifeExp,\n    names_prefix = \"lifeExp_\"\n  ) |>\n  mutate(change_life_exp = lifeExp_2007 - lifeExp_1952)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 142 × 5\n   country     continent lifeExp_1952 lifeExp_2007 change_life_exp\n   <fct>       <fct>            <dbl>        <dbl>           <dbl>\n 1 Afghanistan Asia              28.8         43.8            15.0\n 2 Albania     Europe            55.2         76.4            21.2\n 3 Algeria     Africa            43.1         72.3            29.2\n 4 Angola      Africa            30.0         42.7            12.7\n 5 Argentina   Americas          62.5         75.3            12.8\n 6 Australia   Oceania           69.1         81.2            12.1\n 7 Austria     Europe            66.8         79.8            13.0\n 8 Bahrain     Asia              50.9         75.6            24.7\n 9 Bangladesh  Asia              37.5         64.1            26.6\n10 Belgium     Europe            68           79.4            11.4\n# ℹ 132 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### Combining Things\n\nSometimes it's useful to combined datasets by rows or columns:\n\n`bind_rows()` is for *rows*, similar to base R's `rbind()` but has some advantages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder52 <- gapminder |>\n  filter(year == 1952)\n\ngapminder07 <- gapminder |>\n  filter(year == 2007)\n\nbind_rows(gapminder52, gapminder07)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 284 × 7\n   country     continent  year lifeExp      pop gdpPercap  pop_m\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>  <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.  8.43 \n 2 Albania     Europe     1952    55.2  1282697     1601.  1.28 \n 3 Algeria     Africa     1952    43.1  9279525     2449.  9.28 \n 4 Angola      Africa     1952    30.0  4232095     3521.  4.23 \n 5 Argentina   Americas   1952    62.5 17876956     5911. 17.9  \n 6 Australia   Oceania    1952    69.1  8691212    10040.  8.69 \n 7 Austria     Europe     1952    66.8  6927772     6137.  6.93 \n 8 Bahrain     Asia       1952    50.9   120447     9867.  0.120\n 9 Bangladesh  Asia       1952    37.5 46886859      684. 46.9  \n10 Belgium     Europe     1952    68    8730405     8343.  8.73 \n# ℹ 274 more rows\n```\n\n\n:::\n:::\n\n\n\n\n`bind_cols()` combined datasets by *columns*, similar to base R's `cbind()`.\\\nFor example, here is a way to create to year-specific variables similar to the `pivot_wider()` example above\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder52 <- gapminder |>\n  filter(year == 1952) |>\n  rename(lifeExp_1952 = lifeExp)\n\ngapminder07 <- gapminder |>\n  filter(year == 2007) |>\n  select(lifeExp) |>\n  rename(lifeExp_2007 = lifeExp)\n\nbind_cols(gapminder52, gapminder07) |>\n  select(starts_with(\"lifeExp\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 142 × 2\n   lifeExp_1952 lifeExp_2007\n          <dbl>        <dbl>\n 1         28.8         43.8\n 2         55.2         76.4\n 3         43.1         72.3\n 4         30.0         42.7\n 5         62.5         75.3\n 6         69.1         81.2\n 7         66.8         79.8\n 8         50.9         75.6\n 9         37.5         64.1\n10         68           79.4\n# ℹ 132 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Introducing: `ggplot2`\n\nAs far as data visualization goes, `ggplot2` is probably the most popular package in the R ecosystem.\\\nIt's an implementation of the \"Grammar of graphics\", hence the `gg`, and it's well known for its versatility.\nWe can create the most common types of plots with relative ease, including\n\n-   Scatterplots\n-   Boxplots\n-   Histograms\n-   Barcharts (horizontal or vertical)\n\nA ggplot is made up of **layers**, which are added to the plot with `+` and can be modified with `+` as well.\\\nThink of building a ggplot as stacking layers on top of each other, and modifying the layers as you go.\n\nLet's start with an example of a scatterplot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder)\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\nThis doesn't really do anything yet -- it's the *empty* layer.\nBut at least we specific a dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder, mapping = aes(x = lifeExp, y = gdpPercap))\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\nHere we used `aes()` to declare a *mapping* or *aesthetics* between the variables `lifeExp` to the x-axis and `gdpPercap` to the y-axis.\nThis is the crucial step to creating a plot!\nBut we have not decided what the *geometric* object is going to be, which is the `geom_` part of the plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder, aes(x = lifeExp, y = gdpPercap)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\nThis already looks like a scatterplot!\\\nWe might want to adjust the point size, color, etc. -- that's the job of the `geom`!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder, aes(x = lifeExp, y = gdpPercap)) +\n  geom_point(size = 5, color = \"#206b0d\", alpha = 0.1)\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can save the plot to a variable `p` and then modify it afterwards:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(gapminder, aes(x = lifeExp, y = gdpPercap)) +\n  geom_point(size = 3, color = \"blue\", alpha = 0.25)\n\np\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\nFor example, we can try out some themes, for examples those provided by the `ggthemes` package:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggthemes)\n\np + theme_calc()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\np + theme_economist()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n\n```{.r .cell-code}\np + theme_base()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-21-3.png){width=672}\n:::\n\n```{.r .cell-code}\np + theme_excel()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-21-4.png){width=672}\n:::\n\n```{.r .cell-code}\np + theme_excel_new()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-21-5.png){width=672}\n:::\n\n```{.r .cell-code}\np + theme_stata()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-21-6.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Default theme, but with bigger text\np + theme_gray(base_size = 14)\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Lukas' \"go to\" theme :)\np + theme_minimal(base_size = 14)\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-22-2.png){width=672}\n:::\n:::\n\n\n\n\nPlaying around with ggplot themes is usually a great way to spend an afternoon, so we'll leave it at that for now, but you can find more info at the [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) website or ggplot2's documentation at https://ggplot2.tidyverse.org.\n\n### Core `geom_`s\n\nFor now we will keep the colors and theming simple and focus on the most common types of plots you'll likely want to create:\n\n-   Scatterplots -\\> `geom_point()`\n-   Boxplots -\\> `geom_boxplot()`\n-   Histograms -\\> `geom_histogram()`\n-   Barcharts (horizontal or vertical) -\\> `geom_col()` or `geom_bar()`\n\nAs a general tip, it's often useful to use tidyverse verbs as \"pre-processing\" before piping data into `ggplot()`, that way you can focus on the plot itself after you have prepared your data to look like you need it for the type of plot you want.\n\n#### Scatterplots\n\nWe have seen an example scatterplot before, but given the data at hand it's probably more useful to focus on a specific year at a time, which is easiest to do with a `filter()` step beforehand\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- gapminder |>\n  filter(year == 1987) |>\n  ggplot(aes(x = lifeExp, y = gdpPercap)) +\n  geom_point()\n```\n:::\n\n\n\n\n::: callout-note\nIf you get confused between using `|>` and `+`, know that you are not alone!\\\nLuckily, the error messages are informative.\n:::\n\nA more advanced examples would be to add a linear regression line, but in this case we can already see that a linear fit is not appropriate here.\nWe can still add a regression line though, by adding new layer:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n`geom_smooth()` will add a general trendline, which could be a linear model or a loess curve or a GAM -- if you want to explicitly add a linear trendline, use `geom_smooth(method = \"lm\")`, but beware that this is not always approriate!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\nIn some cases, a scatterplot is maybe not well suited, for example if the `x`-variable is *technically* numeric but *effectively* categorical, like `year` in this case:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  ggplot(aes(x = year, y = gdpPercap)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\nThat's where boxplots are useful!\n\n#### Boxplots\n\nSo a boxplot where each year gets its own box should be straight forward, yes?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  ggplot(aes(x = year, y = gdpPercap)) +\n  geom_boxplot()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Continuous x aesthetic\nℹ did you forget `aes(group = ...)`?\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\nUnfortunately, no.\nSince `year` is technically numeric, we have two ways to deal with it and let ggplot now that `year` should be used as a grouping variable, and one of which the error message already suggested:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  ggplot(aes(x = year, y = gdpPercap, group = year)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngapminder |>\n  ggplot(aes(x = year, y = gdpPercap, group = year)) +\n  geom_boxplot() +\n  scale_y_log10()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-28-2.png){width=672}\n:::\n:::\n\n\n\n\nHere `group` is used within `aes()` as a special mapping that tells `ggplot` that `year` should be used to group the data into boxplots without us needing to otherwise modify the data.\n\nHowever, if we wanted, we could also recode `year` to be a factor variable just for this one case, which should alos get us where we need:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  mutate(year = as.factor(year)) |>\n  ggplot(aes(x = year, y = gdpPercap)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 1997) |>\n  ggplot(aes(x = continent, y = pop)) +\n  geom_boxplot(fill = \"darkred\", alpha = .25) +\n  scale_y_log10(labels = scales::number_format()) +\n  theme_minimal(base_size = 14) +\n  theme(\n    axis.title = element_text(hjust = 0, size = unit(13, \"mm\"))\n  )\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Histograms\n\nA histogram is technically a type of barchart, but since it's so common and requires binning the data, it get's a special place within ggplot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- gapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = lifeExp))\n  \np +\n  geom_histogram(color = \"black\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\nIf the defaults are not suited well, we can adjust the bins with `binwidth` (in this case the number of years on the x-axis) or `bins` to specify the number of bins in total.\nAnother thing we'll add is the `color` argument, which for a barchart changes the outline color of the bars and let's us see the bars better.\nThere's also `fill`, which changes the fill color of the bars.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + geom_histogram(binwidth = 5, color = \"black\") \n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n\n```{.r .cell-code}\np + geom_histogram(binwidth = 10, color = \"black\")\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-32-2.png){width=672}\n:::\n\n```{.r .cell-code}\np + geom_histogram(bins = 10, color = \"black\")\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-32-3.png){width=672}\n:::\n:::\n\n\n\n\n#### Barcharts\n\nSometimes people use different names vor horizontal or vertical bar charts, and confusingly enough ggplot only differentiates between \"column\" charts and \"bar\" charts, both of which can have either orientation.\n\nLet's settle on a simple goal: the number of observations (countries) per continent in 2007.\\\nFor practice, let's first calculate that using `dplyr` verbs and use the `n()` helper function which just counts the number of rows (in a group):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007) |>\n  group_by(continent) |>\n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  continent     n\n  <fct>     <int>\n1 Africa       52\n2 Americas     25\n3 Asia         33\n4 Europe       30\n5 Oceania       2\n```\n\n\n:::\n:::\n\n\n\n\nThis combination of `group_by() |> summarize(n = n())` is so common that ggplot has a shortcut for it: `count()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007) |>\n  count(continent)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  continent     n\n  <fct>     <int>\n1 Africa       52\n2 Americas     25\n3 Asia         33\n4 Europe       30\n5 Oceania       2\n```\n\n\n:::\n:::\n\n\n\n\nBut we digress -- let's get charting:\n\n`geom_bar()` behaves similar to `geim_histogram()`, but for categorical variables.\nIt doesn't do any binning, and just counts the number of observations for each group defined by the variable passed to `x`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- gapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = continent)) +\n  geom_bar()\n\np\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\nIf we want to change orientation, it's easy to do, but there are multiple ways!\n\nVersion 1: Use `coord_flip()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + coord_flip()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n\nVersion 2: Pass the variable to `y` rather than `x`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(y = continent)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-note\nThe reason there are multiple ways to do that is because early on, only version 1 was possible, and version 2 was only made possible relatively recently.\\\nThere are many things like that in ggplot2, so please don't be afraid to try out different ways of doing things --- unless you get a warning or error message, it's probably fine if it gets you what you want, and when in doubt there's always good onlie documentation or tutorials.\n:::\n\nBut what about `geom_col`?\\\nWell, sometimes we just want to make a barchart without ggplot doing the counting for us!\\\nMaybe we want percentages rather than absolute numbers on the `y`-axis for example.\nThat's what `geom_col()` is for: It let's us define `x` *and* `y` variables.\n\nLet's say we want the same basic plot as before, but with percentages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007) |>\n  group_by(continent) |>\n  summarize(\n    n = n(),\n    percent = n / n_distinct(gapminder$country)\n  ) |>\n  ggplot(aes(x = continent, y = percent)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\nNote that we need to refer to the full dataset to get the total number of countries here in order to calculate the percentages, because after we have used `group_by()`, all operations are limited to the group we are currently working with!\n\nSo as far as the plot goes, this is technically correct, but not very nice to look at.\\\nLet's use this as a starting point to make our plots a little nicer!\n\n### Your turn: Customization\n\nIf we wanted to use this plot in a publication or presentation, we probably should make a few tweaks.\n\nLet's specify a few \"wants\", together with a few hints on how to achieve them, and experiment with them!\n\n1.  Change the axis labels to something more human-readable\n2.  Add a title, subtitle, and caption to better describe what we're seeing\n3.  Maybe a nicer `fill` color than gray? Pick one you like from <https://www.color-hex.com/>\n4.  Reorder the columns from highest to lowest\n\nAdvanced:\n\n5.  The y-axis labels would probably look better as \"30%\" rather than \"0.3\"\n\nHints:\n\n-   Look at the documentation at <https://ggplot2.tidyverse.org/reference/index.html>\n-   `labs()` should suffice for 1 and 2!\n-   The function `color()` lists all color names R knows, otherwise you can use RGB codes like `#CBDFBD` if you google \"RGB color picker\" you'll find a lot of examples!\n-   Reordering the continents is as easy as using `reorder()`!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007) |>\n  group_by(continent) |>\n  summarize(\n    n = n(),\n    percent = n / n_distinct(gapminder$country)\n  ) |>\n  ggplot(aes(x = reorder(continent, desc(percent)), y = percent)) +\n  geom_col(fill = \"#63AEE1\") +\n  scale_y_continuous(\n    breaks = seq(0, 1, by = 0.1),\n    labels = scales::label_percent()\n  ) +\n  labs(\n    title = \"Countries per Continent\",\n    subtitle = \"Data from Gapminder\",\n    x = \"Continents in Gapminder\",\n    y = \"Countries per Continent\",\n    caption = \"Data as of 2007\"\n  )\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/ggplot-customization-1.png){width=672}\n:::\n:::\n\n\n\n\n## Advanced `ggplot2`\n\n## \"But isn't there an easier way?\"\n\nYes, there is!\\\n`ggplot2` is all about the building blocks, and for many common scenarios it's cumbersome to always stack the same components on top of each other.\\\nLuckily there are *tons* of R packages either extending ggplot2 or providing wrappers for common needs.\n\nOne of those wrapper packages is [`ggstatsplot`](https://indrajeetpatil.github.io/ggstatsplot), which you should have installed earlier in the course but which we haven't used yet.\n\nAs the title suggest this package is primarily aimed towards statistical comparisons, but it can also be used for exploratory analyses.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggstatsplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nYou can cite this package as:\n     Patil, I. (2021). Visualizations with statistical details: The 'ggstatsplot' approach.\n     Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007) |>\n  ggbetweenstats(\n    x = continent, y = lifeExp,\n    xlab = \"Continent\",\n    ylab = \"Life Expectancy (years)\",\n    title = \"Life Expectancy by Continent (2007)\"\n  )\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can disable some of the statistical information by using `bf.message = FALSE` and `results.subtitle = FALSE`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007) |>\n  ggbetweenstats(\n    x = continent, y = lifeExp,\n    xlab = \"Continent\",\n    ylab = \"Life Expectancy (years)\",\n    bf.message = FALSE, \n    results.subtitle = FALSE,\n    title = \"Life Expectancy by Continent (2007)\"\n  )\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n\nRecreating something like this with `ggplot2` is a bit of a chore, but `ggstatsplot` makes it a lot easier!\nHere's an incomplete attempt of recreating the above plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007) |>\n    ggplot(aes(x = continent, y = lifeExp)) +\n    geom_violin() +\n    geom_boxplot(alpha = .1, width = 0.4) +\n    geom_point(\n      aes(fill = continent),\n      shape = 21, size = 3, stroke = 0, alpha = .4,\n      position = position_jitter(width = 0.1)\n    ) +\n    stat_summary(fun = mean, geom = \"point\", shape = 21, size = 3, color = \"black\", fill = \"darkred\") +\n    labs(\n      title = \"Life Expectancy by Continent (2007)\",\n      subtitle = \"Data via Gapminder\",\n      x = \"Continent\",\n      y = \"Life Expectancy (years)\"\n    ) +\n    theme_minimal(base_size = 14) +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](04-tidyverse_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "04-tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}