---
title: "4: The Tidyverse"
format: 
  html:
    toc: true
editor: visual
---

The [**Tidyverse**](https://www.tidyverse.org/) is a collection of R packages created and maintained by the same group of people, largely from the same company that also created RStudio: Posit!

The Tidyverse is designed to make data science easier, more efficient, and more fun.\
It is built around the idea of *tidy data*, which in essence just means that data is organized in a way that makes it easy to work with. In the previous section we have already heard the two core properties of tidy data:

1.  Each **column** of your data is a **variable**
2.  Each **row** of your data is an **observation**

![From R4DS Chapter 5](https://r4ds.hadley.nz/images/tidy-1.png)

And the tidyverse is created in part to make it easy to get your data in that shape and work with data in that shape. If `R` in general is a language, then we can think of "tidyverse" as a kind of dialect â€” it's still R, but it has a specific context and use case and it is spoken by a community of people roughly doing similar kinds of data analysis.

Let's start by loading the `tidyverse` meta-package.

```{r load-tiyverse}
library(tidyverse)
```

You'll see a lot of information there, and that's nothing to worry about. What happened here is the following:

1.  The `tidyverse` package's main purpose is to load *other* packages, like `dplyr`, `ggplot2`, `tidyr`, ... -\> These are the *actual* tidyverse packages that provide the functionality we want!
2.  It warns you about **conflicting function names**, like `filter` and `lag`. There are built-in functions in R of the same name that do very different things than they do in the tidyverse, and for the most part that is not a problem **unless** you try to use the function `filter` from the `dplyr` package but forgot to load `dplyr` beforehand!

Note that in the tidyverse, the `tibble` enhances the `data.frame`!\
Tibbles are similar to data.frames, but they look nice and avoid some potentially confusing issues.\
For now we don't need to know more, but fur future reference you should not worry when you encounter a `tibble`!

## Tidyverse Basics: Pipes and Verbs

We start by loading the `gapminder` package again for its dataset, just like we did before, but now we can `glimpse` it rather than `str` it:

```{r load-gapminder}
library(gapminder)

glimpse(gapminder)
```

Remember how it was somewhat awkward to select specific rows and columns from the `data.frame` before?

For example, here is "country, life expectancy and population for all Asian countries in 1967" in *base R* syntax:

```{r base-filter-select}
gapminder[gapminder$continent == "Asia" & gapminder$year == 1967, 
          c("country", "lifeExp", "pop")]
```

In the `tidyverse`, or specifically `dplyr` syntax, we would write it like this:

```{r tidy-filter-select}
gapminder |>
  filter(continent == "Asia" & year == 1967) |>
  select(country, lifeExp, pop)
```

What happened here? Let's dissect this one by one:

1.  We started with the `gapminder` dataset, and *then*, via the "pipe" `|>`,
2.  We used `filter()` to select **rows** using a logical expression, and *then*
3.  We used `select()` to select specific **columns** (without having to quote than with `"`!)

This is a combination of the pipe-syntax, which passes things down to the next function, and the most common tidyverse **verbs** that are at the core of most data operations.

The pipe `|>` works everywhere in R, and `x |> foo()` is just a different way to write `foo(x)`:

```{r}
x <- 1:10

length(x)
x |> length()
```

This becomes really powerful once we *chain* many functions.\
Consider a made-up example:

``` r
x |>
  do_the_thing() |>
  do_the_other_thing() |>
  twist_it() |>
  shake_it_around() |>
  do_a_little_dance()
```

Here you can read the code top to bottom, and understand the sequence of events just by following the code. Consider what this would look like without the `|>`:

``` r
do_a_little_dance(shake_it_around(twist_it(do_the_other_thing(do_the_thing(x)))))
```

Or, with a little more indentation:

``` r
do_a_little_dance(
  shake_it_around(
    twist_it(
      do_the_other_thing(
        do_the_thing(x)
      )
    )
  )
)
```

You would have to read the code "inside out" to follow what's happening here.

Another alternative would be to create new variables or overwrite the previous one, like so:

``` r
x <- do_the_thing(x)
x <- do_the_other_thing(x)
x <- twist_it(x)
x <- shake_it_around(x) 
x <- do_a_little_dance(x)
```

The pipe syntax might take some getting used to, but usually people find it quite intuitive after a while.

Please keep in mind though that *not everything* has to be translated into a pipe-syntax, and that there are always other ways to do the same thing.

## Common Verbs (I)

All verbs take a `data.frame` (or `tibble`, which are almost the same thing) as their first argument, and the most important ones are:

-   `select()`: Selects variables (**columns**) of the dataset (without quoting them with `" "`)
-   `filter()`: Filters the dataset to only the **rows** matching the condition(s) inside
-   `arrange()`: **Sorts** the dataset by a variable like `pop`, optionally in decreasing order by using `desc()` inside.

We start with `select()`, which is fairly self-explanatory and corresponds to using `[ ]` with column names or indices as we've seen before

```{r}
gapminder |>
  select(year, country, pop)

# If we happen to know the variable indices, this also works
gapminder |>
  select(3, 1, 5)
```

In cases where we pick out individual variables, we often want to sort by one as well:

```{r}
gapminder |>
  select(year, continent, country) |>
  arrange(year)
```

Or sorting descendingly with the `desc()` helper function:

```{r}
gapminder |>
  select(year, continent, country) |>
  arrange(desc(year))
```

For a numeric variable like `year` we could also just sort by a negative of the variable:

```{r}
gapminder |>
  select(year, continent, country) |>
  arrange(-year)
```

But `desc()` has the benefit of also working for `character` (sorted alphabetically) or `factor` variables (sorted by their `levels`), which makes `desc()` applicable in more cases.

```{r}
gapminder |>
  select(year, continent, country) |>
  arrange(desc(continent))
```

```{r}
gapminder97 <- gapminder |>
  filter(year == 1997) |>
  arrange(pop)
```

Note that in `filter()` you use logical expressions as we've seen in section 2!\
You can combine multiple conditions by passing them as separate arguments with `,` which inside `filter()` is the same as using the logical `AND` with `&`:

```{r}
# Explicitly using AND & to combine year and country conditions
gapminder |>
  filter(year == 1997 & country == "Iceland")

# Identical:
gapminder |>
  filter(
    year > 1990, 
    country == "Iceland"
  )
```

As a more advanced example, we can use `select()`-helper functions to select variables that start with a certain pattern or contain a certain word:

```{r}
gapminder |>
  select(starts_with("c"))

gapminder |>
  select(contains("gdp"))

gapminder |>
  select(ends_with("p"))
```

### Your turn

1.  Select the country and life expectancy variables for the year 1952
2.  Subset the dataset to only contain data recorded after 1990
3.  Subset the dataset to only contain data in the 1970s for Ecuador

```{r tidyverse-select-filter1}
gapminder |>
  filter(year == 1952) |>
  select(country, lifeExp)
```

```{r tidyverse-select-filter2}
gapminder |>
  filter(year > 1990)
```

```{r tidyverse-select-filter3a}
gapminder |>
  filter(
    year >= 1970, year <= 1979,
    country == "Ecuador"
  )

gapminder |> 
  filter(year > 1969 & year < 1980) |> 
  filter(country == "Ecuador")

```

```{r tidyverse-select-filter3b}
gapminder |>
  filter(
    between(year, 1970, 1979),
    country == "Ecuador"
  )
```

Hint: When you select *and* filter, keep in mind the order of operations!\
You can't filter by a variable which you have de-selected beforehand.

## Common Verbs (II)

So far we have only selected specific subsets of our data, but now we want to actually *do* something! For that, we have two main options:

1.  Creating a new variable
2.  Calculating some summary statistic like the mean or median

-   `mutate()`: Creates a **new variables**, e.g. create `pop_m` as the variable `pop` divided by 1,000,000
-   `summarize()`: Often used together with `group_by()`, this **summarizes** the dataset by calculating something for each group declared by `group_by()`
-   `group_by()`: Declares the dataset to be **grouped** by the values of variable like `continent` -- we will see examples next!

```{r}
gapminder <- gapminder |>
  mutate(pop_m = pop / 1e6)

gapminder |>
  mutate(pop = pop / 1e6)

```

```{r}

gapminder |>
  mutate(pop_mean = mean(pop))

gapminder |>
  summarize(
    pop_mean = mean(pop)
  )
```

```{r}
gapminder |>
  group_by(continent)

gapminder |>
  group_by(continent) |>
  summarize(mean_pop = mean(pop))
```

Or multiple things combined:

```{r gapminder-piping}
gapminder |>
  filter(year >= 1980) |>
  mutate(pop_m = pop / 1e6) |>
  group_by(continent) |>
  summarize(
    mean_pop_m = mean(pop_m),
    median_pop_m = median(pop_m),
    min_pop_m = min(pop_m),
    max_pop_m = max(pop_m)
  )
```

### Your turn

0.  install the tidyverse & load with `library(tidyverse)`
1.  Explain in words what has happened in the previous code chunk.
2.  What happens if you use `summarize()` without `group_by()`?
3.  Use `summarise()` and the helpful `n_distinct()` to calculate the number of countries per continent
4.  Create a new variable `gdpPercap_m` as the variable `gdpPercap` divided by 1 Million and rounded to 2 decimal places

```{r tidyverse-mutate-summarize3}
gapminder |>
  group_by(continent) |>
  summarize(
    num_countries = n_distinct(country),
    n = n()
  )

gapminder |>
  filter(continent == "Oceania") |>
  group_by(country) |>
  summarize(
    n = n(),
    num_years = n_distinct(year)
  )

```

```{r tidyverse-mutate-summarize4}
gapminder |>
  mutate(gdpPercap_m = round(gdpPercap / 1e3, digits = 2))

gapminder |>
  mutate(gdpPercap_m = gdpPercap / 1e6) |>
  mutate(gdpPercap_m = round(gdpPercap_m, digits = 2))
```

## Other Useful Verbs

### Changing Shapes

A more advanced topic but often needed for data manipulation is reshaping your data using the `tidyr` package.

This might be best explained by example.\
Say we want to calculate the difference in life expectancy between 1952 and 2007 for each country and continent, but using the verbs we've seen so far we can't do that with a simple `mutate()`. We can instead use `pivot_wider()` which is a function that takes a "long" dataset and pivots it into a "wide" dataset:

```{r}
gapminder |>
  filter(year %in% c(1952, 2007)) |>
  pivot_wider(
    id_cols = c(country, continent), 
    names_from = year, 
    values_from = lifeExp,
    names_prefix = "lifeExp_"
  ) |>
  mutate(change_life_exp = lifeExp_2007 - lifeExp_1952)
```

### Combining Things

Sometimes it's useful to combined datasets by rows or columns:

`bind_rows()` is for *rows*, similar to base R's `rbind()` but has some advantages

```{r}
gapminder52 <- gapminder |>
  filter(year == 1952)

gapminder07 <- gapminder |>
  filter(year == 2007)

bind_rows(gapminder52, gapminder07)
```

`bind_cols()` combined datasets by *columns*, similar to base R's `cbind()`.\
For example, here is a way to create to year-specific variables similar to the `pivot_wider()` example above

```{r}
gapminder52 <- gapminder |>
  filter(year == 1952) |>
  rename(lifeExp_1952 = lifeExp)

gapminder07 <- gapminder |>
  filter(year == 2007) |>
  select(lifeExp) |>
  rename(lifeExp_2007 = lifeExp)

bind_cols(gapminder52, gapminder07) |>
  select(starts_with("lifeExp"))
```
