---
title: "4: The Tidyverse"
format: html
editor: visual
---

The [**Tidyverse**](https://www.tidyverse.org/) is a collection of R packages created and maintained by the same group of people, largely from the same company that also created RStudio: Posit!

The Tidyverse is designed to make data science easier, more efficient, and more fun.\
It is built around the idea of *tidy data*, which in essence just means that data is organized in a way that makes it easy to work with.
In the previous section we have already heard the two core proerties of tidy data:

1.  Each **column** of your data is a **variable**
2.  Each **row** of your data is an **observation**

And the tidyverse is created in part to make it easy to get your data in that shape and work with data in that shape.
If `R` in general is a language, then we can think of "tidyverse" as a kind of dialect -- it's still R, but it has a specific context and use case and it is spoken by a community of people roughly doing similar kinds of data analysis.

Let's start by loading the `tidyverse` meta-package.

```{r load-tiyverse}
library(tidyverse)
```

You'll see a lot of information there, and that's nothing to worry about.
What happened here is the following:

1.  The `tidyverse` package's main purpose is to load *other* packages, like `dplyr`, `ggplot2`, `tibble`, ... -\> These are the *actual* tidyverse packages that provide the functionality we want!
2.  It warns you about **conflicting function names**, like `filter` and `lag`. There are built-in functions in R of the same name that do very different things than they do in the tidyverse, and for the most part that is not a problem **unless** you try to use the function `filter` from the `dplyr` package but forgot to load `dplyr` beforehand!

## Tidyverse Basics: Pipes and Verbs

We start by loading the `gapmidner` package again for its dataset, just like we did before, but now we can `glimpse` it rather than `str` it:

```{r}
library(gapminder)

glimpse(gapminder)
```

Remember how it was somewhat awkward to select specific rows and columns from the `data.frame` before?

For example, here is "country, life expectancy and population for all asian countries in 1967" in *base R* syntax:

```{r}
gapminder[gapminder$continent == "Asia" & gapminder$year == 1967, c("country", "lifeExp", "pop")]
```

In the `tidyverse`, or specifically `dplyr` syntax, we would write it like this:

```{r}
gapminder |>
  select(country, lifeExp, pop) |>
  filter(continent == "Asia" & year == 1967)
```

What happened here?
Let's dissect this one by one:

1.  We started with the `gapminder` dataset, and *then*, via the "pipe" `|>`,
3.  We used `select()` to select specific **columns** (without having to quote tham with `"`!)
2.  We used `filter()` to select **rows** using a logical expression, and *then*

This is a combination of the pipe-syntax, which passes things down to the next function, and the most common tidyverse **verbs** that are at the core of most data operations.

The pipe `|>` works everywhere in R, and `x |> foo()` is just a different way to write `foo(x)`:

```{r}
x <- 1:10

length(x)
x |> length()
```

This becomes really powerful once we *chain* many functions.  
Consider a made-up example:

```r
x |>
  do_the_thing() |>
  do_the_other_thing() |>
  twist_it() |>
  shake_it_around() |>
  do_a_little_dance()
```

Here you can read the code top to bottom, and understand the sequence of events just by following the code.
Consider what this would look like without the `|>`:

```r
do_a_little_dance(shake_it_around(twist_it(do_the_other_thing(do_the_thing(x)))))
```

Or, with a little more indentation:

```r
do_a_little_dance(
  shake_it_around(
    twist_it(
      do_the_other_thing(
        do_the_thing(x)
      )
    )
  )
)
```

You would have to read the code "inside out" to follow what's happening here.

Another alternative would be to create new variables or overwrite the previous one, like so:

```r
x <- do_the_thing(x)
x <- do_the_other_thing(x)
x <- twist_it(x)
x <- shake_it_around(x) 
x <- do_a_little_dance(x)
```

The pipe syntax might get some getting used to, but usually people find it quite intuitive after a while.

Please keep in mind though that _not everything_ has to be translated into a pipe-syntax, and that there are always other ways to do the same thing.

## Common Verbs (I)

All verbs take a `data.frame` (or `tibble`, which are almost the same thing) as their first argument, and the most important ones are:

-   `select()`: Selects variables (**columns**) of the dataset (wihtout quoting them with `" "`)
-   `filter()`: Filters the dataset to only the **rows** matching the condition(s) inside
-   `arrange()`: **Sorts** the dataset by a variable like `pop`, optionally in decreasing order by using `desc()` inside.

We start with `select()`, which is fairly self-explanatory and corresponds to using `[ ]` with column names or indices as we've seen before

```{r}
gapminder |>
  select(year, country, pop)

# If we happen to know the variable indices, this also works
gapminder |>
  select(3, 1, 5)
```

In cases where we pick out individual variables, we often want to sort by one as well:

```{r}
gapminder |>
  select(year, continent, country) |>
  arrange(year)
```

Or sorting descendingly with the `desc()` helepr function:

```{r}
gapminder |>
  select(year, continent, country) |>
  arrange(desc(year))
```

For a numeric variable like `year` we could also just sort by a negative of the variable:

```{r}
gapminder |>
  select(year, continent, country) |>
  arrange(-year)
```

But `desc()` has the benefit of also working for `character` (sorted alphabetically) or `factor` variables (sorted by their `levels`), which makes `desc()` applicable in more cases.

```{r}
gapminder |>
  filter(year == 1997) |>
  arrange(pop)
```

Note that in `filter()` you use logical expressions as we've seen in section 2!  
You can combine multiple conditions by passing them as separate arguments with `, ` which inside `filter()` is the same as using the logical `AND` with `&`:

```{r}
# Explicitly using AND & to combine year and country conditions
gapminder |>
  filter(year == 1997 & country == "Iceland")

# Identical:
gapminder |>
  filter(year == 1997, country == "Iceland")
```

As a more advanced example, we can use `select()`-helper functions to select variables that start with a certain pattern or contain a certain word:

```{r}
gapminder |>
  select(starts_with("c"))

gapminder |>
  select(contains("gdp"))

gapminder |>
  select(ends_with("p"))
```

### Your turn

1. Select the country and life expectency variables for the year 1952
2. Subset the dataset to only contain data recorded after 1990
3. Subset the dataset to only contain data in the 1970s for Ecuador

```{r tidyverse-select-filter}

```

Hint: When you select _and_ filter, keep in mind the order of operations!  
You can't filter by a variable which you have de-selected beforehand.

## Common Verbs (II)

So far we have only selected specific subsets of our data, but now we want to actually _do_ something!
For that, we have two main options: 

1. Creating a new variable
2. Calculating some summary statistic like the mean or median

-   `mutate()`: Creates a **new variables**, e.g. create `pop_m` as the variable `pop` divided by 1,000,000
-   `summarize()`: Often used toger with `group_by()`, this **summarizes** the dataset by calculating something for each group declared by `group_by()`
-   `group_by()`: Declares the dataset to be **grouped** by the values of variable like `continent` -- we will see examples next!


```{r}
gapminder |>
  mutate(pop_m = pop / 1e6)
```

```{r}
gapminder |>
  group_by(continent)

gapminder |>
  group_by(continent) |>
  summarize(mean_pop = mean(pop))
```

Or multiple things combined:

```{r gapminder-piping}
gapminder |>
  filter(year >= 1980) |>
  mutate(pop_m = pop / 1e6) |>
  group_by(continent) |>
  summarize(
    mean_pop_m = mean(pop_m),
    median_pop_m = median(pop_m)
  )
```

### Your turn

1. Explain in words what has happened in the previous code chunk.
2. What happens if you use `summarize()` without `group_by()`?
3. Use `summarise()` and the helpful `n_distinct()` to calculate the number of countries per continent
4. Create a new variable `gdpPercap_m` as the variable gdpPercap divided by 1 Million and rounded to 2 decimal places

```{r tidyverse-mutate-summarize}

```

## Other Useful Verbs

### Changing Shapes 

A more advanced topic but often needed for data manipulation is reshaping your data using the `tidyr` package.

This might be best explained by example.  
Say we want to calculate the difference in life expectancy between 1952 and 2007 for each country and continent, but using the verbs we've seen so far we can't do that with a simple `mutate()`.
We can instead use `pivot_wider()` which is a function that takes a "long" dataset and pivots it into a "wide" dataset:

```{r}
gapminder |>
  filter(year %in% c(1952, 2007)) |>
  pivot_wider(
    id_cols = c(country, continent), 
    names_from = year, 
    values_from = lifeExp,
    names_prefix = "lifeExp_"
  )
```

### Combining Things

Sometimes it's useful to combined datasets by rows or columns:

`bind_rows()` is for *rows*, similar to base R's `rbind()` but has some advantages

```{r}
gapminder52 <- gapminder |>
  filter(year == 1952)

gapminder07 <- gapminder |>
  filter(year == 2007)

bind_rows(gapminder52, gapminder07)
```

`bind_cols()` combined datasets by *columns*, similar to base R's `cbind()`.  
For example, here is a way to create to year-specific variables similar to the `pivot_wider()` example above

```{r}
gapminder52 <- gapminder |>
  filter(year == 1952) |>
  rename(lifeExp_1952 = lifeExp)

gapminder07 <- gapminder |>
  filter(year == 2007) |>
  select(lifeExp) |>
  rename(lifeExp_2007 = lifeExp)

bind_cols(gapminder52, gapminder07) |>
  select(starts_with("lifeExp"))
```

## Introducing: `ggplot2`

As far as data visualization goes, `ggplot2` is probably the most popular package in the R ecosystem.  
It's an implementation of the "Grammar of graphics", hence the `gg`, and it's well known for its versatility.
We can create the most common types of plots with relative ease, including

- Scatterplots
- Boxplots
- Histograms
- Barcharts (horizontal or vertical)

A ggplot is made up of **layers**, which are added to the plot with `+` and can be modified with `+` as well.  
Think of building a ggplot as stacking layers on top of each other, and modifying the layers as you go.

Let's start with an example of a scatterplot:

```{r}
ggplot(gapminder)
```

This doesn't really do anything yet -- it's the _empty_ layer. But at least we specific a dataset.

```{r}
ggplot(gapminder, mapping = aes(x = lifeExp, y = gdpPercap))
```

Here we used `aes()` to delcare a _mapping_ or _aesthetics_ between the variables `lifeExp` to the x-axis and `gdpPercap` to the y-axis.
This is the crucial step to creating a plot!
But we have not decided what the _geometric_ object is going to be, which is the `geom_` part of the plot.

```{r}
ggplot(gapminder, aes(x = lifeExp, y = gdpPercap)) +
  geom_point()
```

This already looks like a scatterplot!  
We might want to adjust the point size, color, etc. -- that's the job of the `geom`!

```{r}
ggplot(gapminder, aes(x = lifeExp, y = gdpPercap)) +
  geom_point(size = 3, color = "blue", alpha = 0.25)
```

We can save the plot to a variable `p` and then modify it afterwards:

```{r}
p <- ggplot(gapminder, aes(x = lifeExp, y = gdpPercap)) +
  geom_point(size = 3, color = "blue", alpha = 0.25)

p
```

For example, we can try out some themes, for examples those provided by the `ggthemes` package:

```{r}
library(ggthemes)

p + theme_calc()
p + theme_economist()
p + theme_base()
```

```{r}
# Default theme, but with bigger text
p + theme_gray(base_size = 14)
# Lukas' "go to" theme :)
p + theme_minimal(base_size = 14)
```

Playing around with ggplot themes is usually a great way to spend an afternoon, so we'll leave it at that for now, but you can find more info at the [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) website or ggplot2's documentation at https://ggplot2.tidyverse.org. 

### Core `geom_`s

For now we will keep the colors and theming simple and focus on the most common types of plots you'll likely want to create:

- Scatterplots -> `geom_point()`
- Boxplots -> `geom_boxplot()`
- Histograms -> `geom_histogram()`
- Barcharts (horizontal or vertical) -> `geom_col()` or `geom_bar()`

As a general tip, it's often useful to use tidyverse verbs as "pre-processing" before piping data into `ggplot()`, that way you can focus on the plot itself after you have prepared your data to look like you need it for the type of plot you want.

#### Scatterplots

We have seen an example scatterplot before, but given the data at hand it's probably more useful to focus on a specific year at a time, which is easiest to do with a `filter()` step beforehand

```{r}
gapminder |>
  filter(year == 2007) |>
  ggplot(aes(x = lifeExp, y = gdpPercap)) +
  geom_point()
```

::: {.callout-note}
If you get confused between using `|>` and `+`, know that you are not alone!  
Luckily, the error messages are informative.
:::

Beware that in some cases, a scatterplot is maybe not well suited, for example if the `x`-variable is _technically_ numeric but _effectively_ categorical, like `year` in this case:

```{r}
gapminder |>
  ggplot(aes(x = year, y = gdpPercap)) +
  geom_point()
```

#### Boxplots

That's where boxplots are useful!
So a boxplot where each year gets its own box should be straight forward, yes?

```{r}
gapminder |>
  ggplot(aes(x = year, y = gdpPercap)) +
  geom_boxplot()
```

Unfortunately, no. Since `year` is technically numeric, we have two ways to deal with it and let ggplot now that `year` should be used as a grouping variable, and one of which the error message already suggested:

```{r}
gapminder |>
  ggplot(aes(x = year, y = gdpPercap, group = year)) +
  geom_boxplot()
```

Here `group` is used within `aes()` as a special mapping that tells `ggplot` that `year` should be used to group the data into boxplots without us needing to otherwise modify the data.

However, if we wanted, we could also recode `year` to be a factor variable just for this one case, which should alos get us where we need:

```{r}
gapminder |>
  mutate(year = as.factor(year)) |>
  ggplot(aes(x = year, y = gdpPercap)) +
  geom_boxplot()

```

#### Histograms

A histogram is technically a type of barchart, but since it's so common and requires binning the data, it get's a special place within ggplot.


```{r}
p <- gapminder |>
  filter(year == 2007) |>
  ggplot(aes(x = lifeExp)) 
  
p +
  geom_histogram()
```

If the defaults are not suited well, we can adjust the bins with `binwidth` (in this case the number of years on the x-axis) or `bins` to specify the number of bins in total.
Another thing we'll add is the `color` argument, which for a barchart changes the outline color of the bars and let's us see the bars better.
There's also `fill`, which changes the fill color of the bars.


```{r}
p + geom_histogram(binwidth = 5, color = "black")
p + geom_histogram(binwidth = 10, color = "black")
p + geom_histogram(bins = 5, color = "black")
```


#### Barcharts

Sometimes people use different names vor horizontal or vertical bar charts, and confusingly enough ggplot only differentiates between "column" charts and "bar" charts, both of which can have either orientation.

Let's settle on a simple goal: the number of observations (countries) per continent in 2007.  
For practice, let's first calculate that using `dplyr` verbs and use the `n()` helper function which just counts the number of rows (in a group):

```{r}
gapminder |>
  filter(year == 2007) |>
  group_by(continent) |>
  summarize(n = n())
```

This combination of `group_by() |> summarize(n = n())` is so common that ggplot has a shortcut for it: `count()`:

```{r}
gapminder |>
  filter(year == 2007) |>
  count(continent)
```

But we digress -- let's get charting:

`geom_bar()` behaves similar to `geim_histogram()`, but for categorical variables. It doesn't do any binning, and just counts the number of observations for each group defined by the variable passed to `x`: 

```{r}
p <- gapminder |>
  filter(year == 2007) |>
  ggplot(aes(x = continent)) +
  geom_bar()

p
```

If we want to change orientation, it's easy to do, but there are multiple ways!

Version 1: Use `coord_flip()`:

```{r}
p + coord_flip()
```

Version 2: Pass the variable to `y` rather than `x`:

```{r}
gapminder |>
  filter(year == 2007) |>
  ggplot(aes(y = continent)) +
  geom_bar()
```

::: {.callout-note}
The reason there are multiple ways to do that is because early on, only version 1 was possible, and version 2 was only made possible relatively recently.  
There are many things like that in ggplot2, so please don't be afraid to try out different ways of doing things --- unless you get a warning or error message, it's probably fine if it gets you what you want, and when in doubt there's always good onlie documentation or tutorials.
:::

But what about `geom_col`?  
Well, sometimes we just want to make a barchart without ggplot doing the counting for us!  
Maybe we want percentages rather than absolute numbers on the `y`-axis for example.
That's what `geom_col()` is for: It let's us define `x` _and_ `y` variables.

Let's say we want the same basic plot as before, but with percentages:

```{r}
gapminder |>
  filter(year == 2007) |>
  group_by(continent) |>
  summarize(
    n = n(),
    percent = n / n_distinct(gapminder$country)
  ) |>
  ggplot(aes(x = continent, y = percent)) +
  geom_col()
```

Note that we need to refer to the full dataset to get the total number of countries here in order to calculate the percentages, because after we have used `group_by()`, all operations are limted to the group we are currently working with!

So as far as the plot goes, this is technically correct, but not very nice to look at.  
Let's use this as a starting point to make our plots a little nicer!

### Your turn: Customization

If we wanted to use this plot in a publication or presentation, we probably should make a few tweaks.  

Let's specify a few "wants", together with a few hints on how to achieve them, and experiment with them!

1. Change the axis labels to something more human-readable
2. Add a title, subtitle, and caption to better describe what we're seeing
3. Maybe a nicer `fill` color than gray? Pick one you like from https://www.color-hex.com/
4. Reorder the columns from highest to lowest

Advanced: 

5. The y-axis labels would probably look better as "30%" rather than "0.3"

Hints:

- Look at the documentation at https://ggplot2.tidyverse.org/reference/index.html
- `labs()` should suffice bor 1 and 2!
- The function `color()` lists all color names R knows, otherwise you can use RGB codes like `#CBDFBD` if you google "RGB color picker" you'll find a lot of examples!
- Reordering the continents is as easy as using `reorder()`!

